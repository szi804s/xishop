// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Using a direct mapping from the SQL schema.
// Field names are in camelCase as per JS/TS conventions.

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  shops     Shop[]
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shop {
  id        Int       @id @default(autoincrement())
  name      String
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  theme     Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  orders    Order[]
  apiKey    ShopApiKey?
  commandQueue CommandQueue[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String?
  shopId      Int
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  commands    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Order {
  id              Int      @id @default(autoincrement())
  productId       Int
  product         Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  shopId          Int
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Restrict)
  buyerPlayerName String
  status          String
  totalAmount     Decimal  @db.Decimal(10, 2)
  paymentGateway  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  commandQueue    CommandQueue[]
}

model CommandQueue {
  id         Int      @id @default(autoincrement())
  shopId     Int
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  orderId    Int      @unique
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  playerName String
  command    String
  processed  Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([processed])
}

model ShopApiKey {
  id        Int      @id @default(autoincrement())
  shopId    Int      @unique
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  apiKey    String   @unique
  createdAt DateTime @default(now())
} 